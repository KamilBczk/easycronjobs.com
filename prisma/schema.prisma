// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// -------- Auth.js / NextAuth core models --------
/// Source: @auth/prisma-adapter (ajout d'un champ passwordHash)
/// https://authjs.dev/reference/prisma-adapter

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  // Ajout pour Credentials:
  passwordHash  String? // null si login uniquement via OAuth
  isAdmin       Boolean   @default(false) // Pour accès admin

  accounts Account[]
  sessions Session[]

  // Multi-tenant:
  teamMembers  TeamMember[]
  createdTeams Team[]       @relation("TeamCreator")
  // Blog:
  blogPosts    BlogPost[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// -------- Multi-tenant (équipes) --------

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

model Team {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  createdById String?
  createdBy   User?         @relation("TeamCreator", fields: [createdById], references: [id])

  // Subscription Stripe
  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  subscriptionStatus     String? // trialing, active, canceled, past_due, incomplete, incomplete_expired
  trialEndsAt            DateTime?

  members     TeamMember[]
  categories  JobCategory[]
  jobs        Job[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      TeamRole @default(MEMBER)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([teamId, userId])
}

/// -------- Catégories & Jobs --------

model JobCategory {
  id        String   @id @default(cuid())
  teamId    String
  name      String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  jobs      Job[]
  createdAt DateTime @default(now())

  @@unique([teamId, name])
}

enum JobStatus {
  ENABLED
  DISABLED
}

model Job {
  id          String    @id @default(cuid())
  teamId      String
  categoryId  String?
  name        String
  description String?
  status      JobStatus @default(ENABLED)

  // Schedule configuration
  scheduleMode     String    @default("preset") // "preset" | "cron"
  schedulePreset   String? // "daily", "hourly", etc.
  cronExpression   String?
  timezone         String    @default("UTC")
  startAt          DateTime?
  endAt            DateTime?
  allowedDays      Json? // boolean array [true, true, true, true, true, true, true]
  allowedTimeStart String? // "09:00"
  allowedTimeEnd   String? // "17:00"

  // API configuration
  apiMethod          String  @default("GET")
  apiUrl             String
  apiAuth            Json? // AuthConfig object
  apiQueryParams     Json? // KeyValuePair array
  apiHeaders         Json? // KeyValuePair array
  apiBody            String?
  apiBodyType        String  @default("json") // "json" | "form" | "raw"
  apiTimeout         Int     @default(30000)
  apiFollowRedirects Boolean @default(true)
  apiSuccessCodes    Json? // number array
  apiFailureCodes    Json? // number array

  // Notification configuration
  notificationTrigger         String  @default("error") // "always" | "error" | "success" | "status_change" | "http_codes"
  notificationHttpCodes       Json? // number array
  notificationRecipients      Json? // string array
  notificationSubject         String  @default("{{job.name}} - {{run.state}}")
  notificationTemplate        String  @default("Job {{job.name}} finished with status {{run.state}}")
  notificationIncludeLogs     Boolean @default(true)
  notificationIncludeResponse Boolean @default(false)
  notificationMinInterval     Int     @default(15) // minutes
  notificationMaxPerDay       Int     @default(10)
  notificationDailySummary    Boolean @default(false)

  // Execution configuration
  concurrency       String  @default("skip") // "allow" | "queue" | "skip"
  timeout           Int     @default(300000)
  retries           Int     @default(3)
  backoffType       String  @default("exponential") // "linear" | "exponential"
  backoffDelay      Int     @default(1000)
  jitter            Boolean @default(true)
  runOnDeploy       Boolean @default(false)
  failSafeThreshold Int     @default(5)

  team      Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  category  JobCategory? @relation(fields: [categoryId], references: [id])
  runs      JobRun[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([teamId, status])
}

enum RunState {
  QUEUED
  RUNNING
  OK
  FAIL
  TIMEOUT
}

model JobRun {
  id         String    @id @default(cuid())
  jobId      String
  state      RunState  @default(QUEUED)
  startedAt  DateTime  @default(now())
  finishedAt DateTime?
  attempts   Int       @default(1)
  exitCode   Int?
  log        String?   @db.Text

  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId, state])
}

/// -------- Blog --------

enum BlogPostStatus {
  DRAFT
  PUBLISHED
}

model BlogPost {
  id          String         @id @default(cuid())
  title       String
  slug        String         @unique
  excerpt     String?        @db.Text
  content     String         @db.Text
  coverImage  String?
  status      BlogPostStatus @default(DRAFT)
  publishedAt DateTime?
  authorId    String
  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags        String[]       @default([])
  views       Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([status, publishedAt])
  @@index([slug])
}
